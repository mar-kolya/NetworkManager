Backport of connectivity checking API from NetworkManager 1.10

--- network-manager-1.8.2/libnm/nm-client.h.~1~	2017-06-13 22:40:26.000000000 +0800
+++ network-manager-1.8.2/libnm/nm-client.h	2017-08-22 16:16:46.802814419 +0800
@@ -50,6 +50,8 @@
 #define NM_CLIENT_WIMAX_HARDWARE_ENABLED "wimax-hardware-enabled"
 #define NM_CLIENT_ACTIVE_CONNECTIONS "active-connections"
 #define NM_CLIENT_CONNECTIVITY "connectivity"
+#define NM_CLIENT_CONNECTIVITY_CHECK_AVAILABLE "connectivity-check-available"
+#define NM_CLIENT_CONNECTIVITY_CHECK_ENABLED "connectivity-check-enabled"
 #define NM_CLIENT_PRIMARY_CONNECTION "primary-connection"
 #define NM_CLIENT_ACTIVATING_CONNECTION "activating-connection"
 #define NM_CLIENT_DEVICES "devices"
@@ -125,8 +127,9 @@
 	NM_CLIENT_PERMISSION_RELOAD = 13,
 	NM_CLIENT_PERMISSION_CHECKPOINT_ROLLBACK = 14,
 	NM_CLIENT_PERMISSION_ENABLE_DISABLE_STATISTICS = 15,
+	NM_CLIENT_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK = 16,
 
-	NM_CLIENT_PERMISSION_LAST = 15,
+	NM_CLIENT_PERMISSION_LAST = 16,
 } NMClientPermission;
 
 /**
@@ -249,6 +252,11 @@
 void     nm_client_wimax_set_enabled (NMClient *client, gboolean enabled);
 gboolean nm_client_wimax_hardware_get_enabled (NMClient *client);
 
+gboolean nm_client_connectivity_check_get_available (NMClient *client);
+gboolean nm_client_connectivity_check_get_enabled (NMClient *client);
+void     nm_client_connectivity_check_set_enabled (NMClient *client,
+                                                   gboolean enabled);
+
 gboolean nm_client_get_logging (NMClient *client,
                                 char **level,
                                 char **domains,
--- network-manager-1.8.2/libnm/nm-manager.c.~1~	2017-08-22 15:32:13.000000000 +0800
+++ network-manager-1.8.2/libnm/nm-manager.c	2017-08-22 16:16:46.810814209 +0800
@@ -82,6 +82,9 @@
 
 	gboolean wimax_enabled;
 	gboolean wimax_hw_enabled;
+
+	gboolean connectivity_check_available;
+	gboolean connectivity_check_enabled;
 } NMManagerPrivate;
 
 enum {
@@ -98,6 +101,8 @@
 	PROP_WIMAX_HARDWARE_ENABLED,
 	PROP_ACTIVE_CONNECTIONS,
 	PROP_CONNECTIVITY,
+	PROP_CONNECTIVITY_CHECK_AVAILABLE,
+	PROP_CONNECTIVITY_CHECK_ENABLED,
 	PROP_PRIMARY_CONNECTION,
 	PROP_ACTIVATING_CONNECTION,
 	PROP_DEVICES,
@@ -176,6 +181,8 @@
 		{ NM_MANAGER_WIMAX_HARDWARE_ENABLED,    &priv->wimax_hw_enabled },
 		{ NM_MANAGER_ACTIVE_CONNECTIONS,        &priv->active_connections, NULL, NM_TYPE_ACTIVE_CONNECTION, "active-connection" },
 		{ NM_MANAGER_CONNECTIVITY,              &priv->connectivity },
+		{ NM_MANAGER_CONNECTIVITY_CHECK_AVAILABLE, &priv->connectivity_check_available },
+		{ NM_MANAGER_CONNECTIVITY_CHECK_ENABLED, &priv->connectivity_check_enabled },
 		{ NM_MANAGER_PRIMARY_CONNECTION,        &priv->primary_connection, NULL, NM_TYPE_ACTIVE_CONNECTION },
 		{ NM_MANAGER_ACTIVATING_CONNECTION,     &priv->activating_connection, NULL, NM_TYPE_ACTIVE_CONNECTION },
 		{ NM_MANAGER_DEVICES,                   &priv->devices, NULL, NM_TYPE_DEVICE, "device" },
@@ -229,6 +236,8 @@
 		return NM_CLIENT_PERMISSION_CHECKPOINT_ROLLBACK;
 	else if (!strcmp (nm, NM_AUTH_PERMISSION_ENABLE_DISABLE_STATISTICS))
 		return NM_CLIENT_PERMISSION_ENABLE_DISABLE_STATISTICS;
+	else if (!strcmp (nm, NM_AUTH_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK))
+		return NM_CLIENT_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK;
 
 	return NM_CLIENT_PERMISSION_NONE;
 }
@@ -499,6 +508,31 @@
 }
 
 gboolean
+nm_manager_connectivity_check_get_available (NMManager *manager)
+{
+	g_return_val_if_fail (NM_IS_MANAGER (manager), FALSE);
+
+	return NM_MANAGER_GET_PRIVATE (manager)->connectivity_check_available;
+}
+
+gboolean
+nm_manager_connectivity_check_get_enabled (NMManager *manager)
+{
+	return NM_MANAGER_GET_PRIVATE (manager)->connectivity_check_enabled;
+}
+
+void
+nm_manager_connectivity_check_set_enabled (NMManager *manager, gboolean enabled)
+{
+	g_return_if_fail (NM_IS_MANAGER (manager));
+
+	_nm_object_set_property (NM_OBJECT (manager),
+	                         NM_DBUS_INTERFACE,
+	                         "ConnectivityCheckEnabled",
+	                         "b", enabled);
+}
+
+gboolean
 nm_manager_get_logging (NMManager *manager, char **level, char **domains, GError **error)
 {
 	gboolean ret;
@@ -1352,6 +1386,13 @@
 			/* Let the property value flip when we get the change signal from NM */
 		}
 		break;
+	case PROP_CONNECTIVITY_CHECK_ENABLED:
+		b = g_value_get_boolean (value);
+		if (priv->connectivity_check_enabled != b) {
+			nm_manager_connectivity_check_set_enabled (NM_MANAGER (object), b);
+			/* Let the property value flip when we get the change signal from NM */
+		}
+		break;
 	default:
 		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
 		break;
@@ -1404,6 +1445,12 @@
 	case PROP_CONNECTIVITY:
 		g_value_set_enum (value, priv->connectivity);
 		break;
+	case PROP_CONNECTIVITY_CHECK_AVAILABLE:
+		g_value_set_boolean (value, priv->connectivity_check_available);
+		break;
+	case PROP_CONNECTIVITY_CHECK_ENABLED:
+		g_value_set_boolean (value, priv->connectivity_check_enabled);
+		break;
 	case PROP_PRIMARY_CONNECTION:
 		g_value_set_object (value, priv->primary_connection);
 		break;
@@ -1524,6 +1571,18 @@
 		                    G_PARAM_READABLE |
 		                    G_PARAM_STATIC_STRINGS));
 	g_object_class_install_property
+		(object_class, PROP_CONNECTIVITY_CHECK_AVAILABLE,
+		 g_param_spec_boolean (NM_MANAGER_CONNECTIVITY_CHECK_AVAILABLE, "", "",
+		                       FALSE,
+		                       G_PARAM_READABLE |
+		                       G_PARAM_STATIC_STRINGS));
+	g_object_class_install_property
+		(object_class, PROP_CONNECTIVITY_CHECK_ENABLED,
+		 g_param_spec_boolean (NM_MANAGER_CONNECTIVITY_CHECK_ENABLED, "", "",
+		                       FALSE,
+		                       G_PARAM_READWRITE |
+		                       G_PARAM_STATIC_STRINGS));
+	g_object_class_install_property
 		(object_class, PROP_PRIMARY_CONNECTION,
 		 g_param_spec_object (NM_MANAGER_PRIMARY_CONNECTION, "", "",
 		                      NM_TYPE_ACTIVE_CONNECTION,
--- network-manager-1.8.2/libnm/nm-manager.h.~1~	2017-06-13 22:40:26.000000000 +0800
+++ network-manager-1.8.2/libnm/nm-manager.h	2017-08-22 16:16:46.814814103 +0800
@@ -46,6 +46,8 @@
 #define NM_MANAGER_WIMAX_HARDWARE_ENABLED "wimax-hardware-enabled"
 #define NM_MANAGER_ACTIVE_CONNECTIONS "active-connections"
 #define NM_MANAGER_CONNECTIVITY "connectivity"
+#define NM_MANAGER_CONNECTIVITY_CHECK_AVAILABLE "connectivity-check-available"
+#define NM_MANAGER_CONNECTIVITY_CHECK_ENABLED "connectivity-check-enabled"
 #define NM_MANAGER_PRIMARY_CONNECTION "primary-connection"
 #define NM_MANAGER_ACTIVATING_CONNECTION "activating-connection"
 #define NM_MANAGER_DEVICES "devices"
@@ -97,6 +99,11 @@
 void      nm_manager_wimax_set_enabled (NMManager *manager, gboolean enabled);
 gboolean  nm_manager_wimax_hardware_get_enabled (NMManager *manager);
 
+gboolean  nm_manager_connectivity_check_get_available (NMManager *manager);
+gboolean  nm_manager_connectivity_check_get_enabled (NMManager *manager);
+void      nm_manager_connectivity_check_set_enabled (NMManager *manager,
+                                                     gboolean enabled);
+
 gboolean nm_manager_get_logging (NMManager *manager,
                                  char **level,
                                  char **domains,
--- network-manager-1.8.2/libnm/libnm.ver.~1~	2017-08-22 16:16:46.790814734 +0800
+++ network-manager-1.8.2/libnm/libnm.ver	2017-08-22 16:18:06.264724334 +0800
@@ -1177,3 +1177,10 @@
 	nm_utils_format_variant_attributes;
 	nm_utils_parse_variant_attributes;
 } libnm_1_6_0;
+
+libnm_1_10_0 {
+global:
+	nm_client_connectivity_check_get_available;
+	nm_client_connectivity_check_get_enabled;
+	nm_client_connectivity_check_set_enabled;
+} libnm_1_8_0;
--- network-manager-1.8.2/libnm/nm-client.c.~1~	2017-07-07 20:03:25.000000000 +0800
+++ network-manager-1.8.2/libnm/nm-client.c	2017-08-22 16:16:46.802814419 +0800
@@ -122,6 +122,8 @@
 	PROP_WIMAX_HARDWARE_ENABLED,
 	PROP_ACTIVE_CONNECTIONS,
 	PROP_CONNECTIVITY,
+	PROP_CONNECTIVITY_CHECK_AVAILABLE,
+	PROP_CONNECTIVITY_CHECK_ENABLED,
 	PROP_PRIMARY_CONNECTION,
 	PROP_ACTIVATING_CONNECTION,
 	PROP_DEVICES,
@@ -473,6 +475,66 @@
 }
 
 /**
+ * nm_client_connectivity_check_get_available:
+ * @client: a #NMClient
+ *
+ * Determine whether connectivity checking is available.  This
+ * requires that the URI of a connectivity service has been set in the
+ * configuration file.
+ *
+ * Returns: %TRUE if connectivity checking is available.
+ */
+gboolean
+nm_client_connectivity_check_get_available (NMClient *client)
+{
+	g_return_val_if_fail (NM_IS_CLIENT (client), FALSE);
+
+	if (!nm_client_get_nm_running (client))
+		return FALSE;
+
+	return nm_manager_connectivity_check_get_available (NM_CLIENT_GET_PRIVATE (client)->manager);
+}
+
+/**
+ * nm_client_connectivity_check_get_enabled:
+ * @client: a #NMClient
+ *
+ * Determine whether connectivity checking is enabled.
+ *
+ * Returns: %TRUE if connectivity checking is enabled.
+ */
+gboolean
+nm_client_connectivity_check_get_enabled (NMClient *client)
+{
+	g_return_val_if_fail (NM_IS_CLIENT (client), FALSE);
+
+	if (!nm_client_get_nm_running (client))
+		return FALSE;
+
+	return nm_manager_connectivity_check_get_enabled (NM_CLIENT_GET_PRIVATE (client)->manager);
+}
+
+/**
+ * nm_client_connectivity_check_set_enabled:
+ * @client: a #NMClient
+ * @enabled: %TRUE to enable connectivity checking
+ *
+ * Enable or disable connectivity checking.  Note that if a
+ * connectivity checking URI has not been configured, this will not
+ * have any effect.
+ */
+void
+nm_client_connectivity_check_set_enabled (NMClient *client, gboolean enabled)
+{
+	g_return_if_fail (NM_IS_CLIENT (client));
+
+	if (!nm_client_get_nm_running (client))
+		return;
+
+	nm_manager_connectivity_check_set_enabled (NM_CLIENT_GET_PRIVATE (client)->manager, enabled);
+}
+
+/**
  * nm_client_get_logging:
  * @client: a #NMClient
  * @level: (allow-none): return location for logging level string
@@ -2590,6 +2652,7 @@
 	case PROP_WIRELESS_ENABLED:
 	case PROP_WWAN_ENABLED:
 	case PROP_WIMAX_ENABLED:
+	case PROP_CONNECTIVITY_CHECK_ENABLED:
 		if (priv->manager)
 			g_object_set_property (G_OBJECT (priv->manager), pspec->name, value);
 		break;
@@ -2657,6 +2720,12 @@
 	case PROP_CONNECTIVITY:
 		g_value_set_enum (value, nm_client_get_connectivity (self));
 		break;
+	case PROP_CONNECTIVITY_CHECK_AVAILABLE:
+		g_value_set_boolean (value, nm_client_connectivity_check_get_available (self));
+		break;
+	case PROP_CONNECTIVITY_CHECK_ENABLED:
+		g_value_set_boolean (value, nm_client_connectivity_check_get_enabled (self));
+		break;
 	case PROP_PRIMARY_CONNECTION:
 		g_value_set_object (value, nm_client_get_primary_connection (self));
 		break;
@@ -2895,6 +2964,30 @@
 		                    G_PARAM_STATIC_STRINGS));
 
 	/**
+	 * NMClient::connectivity-check-available
+	 *
+	 * Whether a connectivity checking service has been configured.
+	 */
+	g_object_class_install_property
+		(object_class, PROP_CONNECTIVITY_CHECK_AVAILABLE,
+		 g_param_spec_boolean (NM_CLIENT_CONNECTIVITY_CHECK_AVAILABLE, "", "",
+		                       FALSE,
+		                       G_PARAM_READABLE |
+		                       G_PARAM_STATIC_STRINGS));
+
+	/**
+	 * NMClient::connectivity-check-enabled
+	 *
+	 * Whether a connectivity checking service has been enabled.
+	 */
+	g_object_class_install_property
+		(object_class, PROP_CONNECTIVITY_CHECK_ENABLED,
+		 g_param_spec_boolean (NM_CLIENT_CONNECTIVITY_CHECK_ENABLED, "", "",
+		                       FALSE,
+		                       G_PARAM_READWRITE |
+		                       G_PARAM_STATIC_STRINGS));
+
+	/**
 	 * NMClient:primary-connection:
 	 *
 	 * The #NMActiveConnection of the device with the default route;
--- network-manager-1.8.2/src/nm-manager.c.~1~	2017-08-22 15:32:13.000000000 +0800
+++ network-manager-1.8.2/src/nm-manager.c	2017-08-22 16:16:38.743026408 +0800
@@ -213,6 +213,8 @@
 	PROP_WIMAX_HARDWARE_ENABLED,
 	PROP_ACTIVE_CONNECTIONS,
 	PROP_CONNECTIVITY,
+	PROP_CONNECTIVITY_CHECK_AVAILABLE,
+	PROP_CONNECTIVITY_CHECK_ENABLED,
 	PROP_PRIMARY_CONNECTION,
 	PROP_PRIMARY_CONNECTION_TYPE,
 	PROP_ACTIVATING_CONNECTION,
@@ -4924,6 +4926,7 @@
 		get_perm_add_result (self, chain, &results, NM_AUTH_PERMISSION_RELOAD);
 		get_perm_add_result (self, chain, &results, NM_AUTH_PERMISSION_CHECKPOINT_ROLLBACK);
 		get_perm_add_result (self, chain, &results, NM_AUTH_PERMISSION_ENABLE_DISABLE_STATISTICS);
+		get_perm_add_result (self, chain, &results, NM_AUTH_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK);
 
 		g_dbus_method_invocation_return_value (context,
 		                                       g_variant_new ("(a{ss})", &results));
@@ -4965,6 +4968,7 @@
 	nm_auth_chain_add_call (chain, NM_AUTH_PERMISSION_RELOAD, FALSE);
 	nm_auth_chain_add_call (chain, NM_AUTH_PERMISSION_CHECKPOINT_ROLLBACK, FALSE);
 	nm_auth_chain_add_call (chain, NM_AUTH_PERMISSION_ENABLE_DISABLE_STATISTICS, FALSE);
+	nm_auth_chain_add_call (chain, NM_AUTH_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK, FALSE);
 }
 
 static void
@@ -5679,6 +5683,10 @@
 			permission = NM_AUTH_PERMISSION_SETTINGS_MODIFY_GLOBAL_DNS;
 			audit_op = NM_AUDIT_OP_NET_CONTROL;
 			expected_type = G_VARIANT_TYPE ("a{sv}");
+		} else if (!strcmp (propname, "ConnectivityCheckEnabled")) {
+			glib_propname = NM_MANAGER_CONNECTIVITY_CHECK_ENABLED;
+			permission = NM_AUTH_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK;
+			audit_op = NM_AUDIT_OP_NET_CONTROL;
 		} else
 			return message;
 		interface_type = NMDBUS_TYPE_MANAGER_SKELETON;
@@ -6440,6 +6448,7 @@
 	NMConfigData *config_data;
 	const NMGlobalDnsConfig *dns_config;
 	const char *type;
+	NMConnectivity *connectivity;
 
 	switch (prop_id) {
 	case PROP_VERSION:
@@ -6484,6 +6493,14 @@
 	case PROP_CONNECTIVITY:
 		g_value_set_uint (value, priv->connectivity_state);
 		break;
+	case PROP_CONNECTIVITY_CHECK_AVAILABLE:
+		config_data = nm_config_get_data (priv->config);
+		g_value_set_boolean (value, nm_config_data_get_connectivity_uri (config_data) != NULL);
+		break;
+	case PROP_CONNECTIVITY_CHECK_ENABLED:
+		connectivity = nm_connectivity_get ();
+		g_value_set_boolean (value, nm_connectivity_check_enabled (connectivity));
+		break;
 	case PROP_PRIMARY_CONNECTION:
 		nm_utils_g_value_set_object_path (value, priv->primary_connection);
 		break;
@@ -6550,6 +6567,10 @@
 	case PROP_WIMAX_ENABLED:
 		/* WIMAX is depreacted. This does nothing. */
 		break;
+	case PROP_CONNECTIVITY_CHECK_ENABLED:
+		nm_config_set_connectivity_check_enabled (priv->config,
+		                                          g_value_get_boolean (value));
+		break;
 	case PROP_GLOBAL_DNS_CONFIGURATION:
 		dns_config = nm_global_dns_config_from_dbus (value, &error);
 		if (!error)
@@ -6782,6 +6803,18 @@
 	                       G_PARAM_READABLE |
 	                       G_PARAM_STATIC_STRINGS);
 
+	obj_properties[PROP_CONNECTIVITY_CHECK_AVAILABLE] =
+	    g_param_spec_boolean (NM_MANAGER_CONNECTIVITY_CHECK_AVAILABLE, "", "",
+	                          TRUE,
+	                          G_PARAM_READABLE |
+	                          G_PARAM_STATIC_STRINGS);
+
+	obj_properties[PROP_CONNECTIVITY_CHECK_ENABLED] =
+	    g_param_spec_boolean (NM_MANAGER_CONNECTIVITY_CHECK_ENABLED, "", "",
+	                          TRUE,
+	                          G_PARAM_READWRITE |
+	                          G_PARAM_STATIC_STRINGS);
+
 	obj_properties[PROP_PRIMARY_CONNECTION] =
 	    g_param_spec_string (NM_MANAGER_PRIMARY_CONNECTION, "", "",
 	                         NULL,
--- network-manager-1.8.2/src/nm-manager.h.~1~	2017-07-07 20:03:20.000000000 +0800
+++ network-manager-1.8.2/src/nm-manager.h	2017-08-22 16:16:38.743026408 +0800
@@ -45,6 +45,8 @@
 #define NM_MANAGER_WIMAX_HARDWARE_ENABLED "wimax-hardware-enabled"
 #define NM_MANAGER_ACTIVE_CONNECTIONS "active-connections"
 #define NM_MANAGER_CONNECTIVITY "connectivity"
+#define NM_MANAGER_CONNECTIVITY_CHECK_AVAILABLE "connectivity-check-available"
+#define NM_MANAGER_CONNECTIVITY_CHECK_ENABLED "connectivity-check-enabled"
 #define NM_MANAGER_PRIMARY_CONNECTION "primary-connection"
 #define NM_MANAGER_PRIMARY_CONNECTION_TYPE "primary-connection-type"
 #define NM_MANAGER_ACTIVATING_CONNECTION "activating-connection"
--- network-manager-1.8.2/src/nm-config-data.c.~1~	2017-07-07 20:03:20.000000000 +0800
+++ network-manager-1.8.2/src/nm-config-data.c	2017-08-22 16:16:29.339273745 +0800
@@ -65,6 +65,7 @@
 	PROP_CONFIG_DESCRIPTION,
 	PROP_KEYFILE_USER,
 	PROP_KEYFILE_INTERN,
+	PROP_CONNECTIVITY_ENABLED,
 	PROP_CONNECTIVITY_URI,
 	PROP_CONNECTIVITY_INTERVAL,
 	PROP_CONNECTIVITY_RESPONSE,
@@ -88,6 +89,7 @@
 	MatchSectionInfo *device_infos;
 
 	struct {
+		gboolean enabled;
 		char *uri;
 		char *response;
 		guint interval;
@@ -238,6 +240,14 @@
 	return _nm_utils_strv_cleanup (list, TRUE, TRUE, TRUE);
 }
 
+gboolean
+nm_config_data_get_connectivity_enabled (const NMConfigData *self)
+{
+	g_return_val_if_fail (self, FALSE);
+
+	return NM_CONFIG_DATA_GET_PRIVATE (self)->connectivity.enabled;
+}
+
 const char *
 nm_config_data_get_connectivity_uri (const NMConfigData *self)
 {
@@ -1373,7 +1383,8 @@
 	    || g_strcmp0 (nm_config_data_get_config_description (old_data), nm_config_data_get_config_description (new_data)) != 0)
 		changes |= NM_CONFIG_CHANGE_CONFIG_FILES;
 
-	if (   nm_config_data_get_connectivity_interval (old_data) != nm_config_data_get_connectivity_interval (new_data)
+	if (   nm_config_data_get_connectivity_enabled (old_data) != nm_config_data_get_connectivity_enabled (new_data)
+	    || nm_config_data_get_connectivity_interval (old_data) != nm_config_data_get_connectivity_interval (new_data)
 	    || g_strcmp0 (nm_config_data_get_connectivity_uri (old_data), nm_config_data_get_connectivity_uri (new_data))
 	    || g_strcmp0 (nm_config_data_get_connectivity_response (old_data), nm_config_data_get_connectivity_response (new_data)))
 		changes |= NM_CONFIG_CHANGE_CONNECTIVITY;
@@ -1413,6 +1424,9 @@
 	case PROP_CONFIG_DESCRIPTION:
 		g_value_set_string (value, nm_config_data_get_config_description (self));
 		break;
+	case PROP_CONNECTIVITY_ENABLED:
+		g_value_set_boolean (value, nm_config_data_get_connectivity_enabled (self));
+		break;
 	case PROP_CONNECTIVITY_URI:
 		g_value_set_string (value, nm_config_data_get_connectivity_uri (self));
 		break;
@@ -1510,6 +1524,7 @@
 	priv->connection_infos = _match_section_infos_construct (priv->keyfile, NM_CONFIG_KEYFILE_GROUPPREFIX_CONNECTION);
 	priv->device_infos = _match_section_infos_construct (priv->keyfile, NM_CONFIG_KEYFILE_GROUPPREFIX_DEVICE);
 
+	priv->connectivity.enabled = nm_config_keyfile_get_boolean (priv->keyfile, NM_CONFIG_KEYFILE_GROUP_CONNECTIVITY, "enabled", TRUE);
 	priv->connectivity.uri = nm_strstrip (g_key_file_get_string (priv->keyfile, NM_CONFIG_KEYFILE_GROUP_CONNECTIVITY, "uri", NULL));
 	priv->connectivity.response = g_key_file_get_string (priv->keyfile, NM_CONFIG_KEYFILE_GROUP_CONNECTIVITY, "response", NULL);
 
@@ -1656,6 +1671,12 @@
 	                         G_PARAM_CONSTRUCT_ONLY |
 	                         G_PARAM_STATIC_STRINGS);
 
+	obj_properties[PROP_CONNECTIVITY_ENABLED] =
+	     g_param_spec_string (NM_CONFIG_DATA_CONNECTIVITY_ENABLED, "", "",
+	                          NULL,
+	                          G_PARAM_READABLE |
+	                          G_PARAM_STATIC_STRINGS);
+
 	obj_properties[PROP_CONNECTIVITY_URI] =
 	     g_param_spec_string (NM_CONFIG_DATA_CONNECTIVITY_URI, "", "",
 	                          NULL,
--- network-manager-1.8.2/src/tests/config/test-config.c.~1~	2017-06-13 22:40:26.000000000 +0800
+++ network-manager-1.8.2/src/tests/config/test-config.c	2017-08-22 16:16:29.383272587 +0800
@@ -26,6 +26,7 @@
 #include "nm-test-device.h"
 #include "platform/nm-fake-platform.h"
 #include "nm-bus-manager.h"
+#include "nm-connectivity.h"
 
 #include "nm-test-utils-core.h"
 
@@ -318,6 +319,38 @@
 }
 
 static void
+test_config_connectivity_check (void)
+{
+	const char *CONFIG_INTERN = BUILDDIR"/test-connectivity-check-intern.conf";
+	NMConfig *config;
+	NMConnectivity *connectivity;
+
+	g_assert (g_file_set_contents (CONFIG_INTERN, "", 0, NULL));
+	config = setup_config (NULL, SRCDIR "/NetworkManager.conf", CONFIG_INTERN, NULL,
+	                       "/no/such/dir", "", NULL);
+	connectivity = nm_connectivity_get();
+
+	g_assert (nm_connectivity_check_enabled (connectivity));
+
+	/* disable connectivity checking */
+	g_test_expect_message ("NetworkManager", G_LOG_LEVEL_INFO, "*config: signal *");
+	nm_config_set_connectivity_check_enabled (config, FALSE);
+	g_test_assert_expected_messages ();
+
+	g_assert (!nm_connectivity_check_enabled (connectivity));
+
+	/* re-enable connectivity checking */
+	g_test_expect_message ("NetworkManager", G_LOG_LEVEL_INFO, "*config: signal *");
+	nm_config_set_connectivity_check_enabled (config, TRUE);
+	g_test_assert_expected_messages ();
+
+	g_assert (nm_connectivity_check_enabled (connectivity));
+
+	g_object_unref (connectivity);
+	g_object_unref (config);
+}
+
+static void
 test_config_no_auto_default (void)
 {
 	NMConfig *config;
@@ -1018,6 +1051,7 @@
 
 	g_test_add_func ("/config/set-values", test_config_set_values);
 	g_test_add_func ("/config/global-dns", test_config_global_dns);
+	g_test_add_func ("/config/connectivity-check", test_config_connectivity_check);
 
 	g_test_add_func ("/config/signal", test_config_signal);
 
--- network-manager-1.8.2/src/nm-connectivity.c.~1~	2017-07-07 20:03:25.000000000 +0800
+++ network-manager-1.8.2/src/nm-connectivity.c	2017-08-22 16:16:29.355273323 +0800
@@ -35,6 +35,7 @@
 typedef struct {
 	char *uri;
 	char *response;
+	gboolean enabled;
 	guint interval;
 	NMConfig *config;
 	guint periodic_check_id;
@@ -342,7 +343,7 @@
 	simple = g_simple_async_result_new (G_OBJECT (self), callback, user_data,
 	                                    nm_connectivity_check_async);
 
-	if (priv->uri && priv->interval && priv->curl_mhandle)
+	if (priv->enabled)
 		ehandle = curl_easy_init ();
 
 	if (ehandle) {
@@ -400,7 +401,7 @@
 {
 	NMConnectivityPrivate *priv = NM_CONNECTIVITY_GET_PRIVATE (self);
 
-	return (priv->uri && priv->interval && priv->curl_mhandle);
+	return priv->enabled;
 }
 
 /*****************************************************************************/
@@ -418,6 +419,7 @@
 	NMConnectivityPrivate *priv = NM_CONNECTIVITY_GET_PRIVATE (self);
 	const char *uri, *response;
 	guint interval;
+	gboolean enabled;
 	gboolean changed = FALSE;
 
 	/* Set the URI. */
@@ -453,6 +455,18 @@
 		changed = TRUE;
 	}
 
+	/* Set enabled flag. */
+	enabled = nm_config_data_get_connectivity_enabled (config_data);
+	/* connectivity checking also requires a valid URI, interval and
+	 * curl_mhandle */
+	if (!(priv->uri && priv->interval && priv->curl_mhandle)) {
+		enabled = FALSE;
+	}
+	if (priv->enabled != enabled) {
+		priv->enabled = enabled;
+		changed = TRUE;
+	}
+
 	/* Set the response. */
 	response = nm_config_data_get_connectivity_response (config_data);
 	if (g_strcmp0 (response, priv->response) != 0) {
--- network-manager-1.8.2/src/nm-config.c.~1~	2017-07-07 20:03:25.000000000 +0800
+++ network-manager-1.8.2/src/nm-config.c	2017-08-22 16:16:29.347273533 +0800
@@ -1590,6 +1590,33 @@
 	return TRUE;
 }
 
+/*****************************************************************************/
+
+void nm_config_set_connectivity_check_enabled (NMConfig *self,
+                                               gboolean enabled)
+{
+	NMConfigPrivate *priv;
+	GKeyFile *keyfile;
+
+	g_return_if_fail (NM_IS_CONFIG (self));
+
+	priv = NM_CONFIG_GET_PRIVATE (self);
+	g_return_if_fail (priv->config_data);
+
+	keyfile = nm_config_data_clone_keyfile_intern (priv->config_data);
+
+	/* Remove existing groups */
+	g_key_file_remove_group (keyfile, NM_CONFIG_KEYFILE_GROUP_CONNECTIVITY, NULL);
+
+	if (!enabled) {
+		g_key_file_set_value (keyfile, NM_CONFIG_KEYFILE_GROUP_CONNECTIVITY,
+		                      "enabled", "false");
+	}
+
+	nm_config_set_values (self, keyfile, TRUE, FALSE);
+	g_key_file_unref (keyfile);
+}
+
 /**
  * nm_config_set_values:
  * @self: the NMConfig instance
--- network-manager-1.8.2/src/nm-config-data.h.~1~	2017-06-13 22:40:26.000000000 +0800
+++ network-manager-1.8.2/src/nm-config-data.h	2017-08-22 16:16:29.343273639 +0800
@@ -32,6 +32,7 @@
 #define NM_CONFIG_DATA_CONFIG_DESCRIPTION    "config-description"
 #define NM_CONFIG_DATA_KEYFILE_USER          "keyfile-user"
 #define NM_CONFIG_DATA_KEYFILE_INTERN        "keyfile-intern"
+#define NM_CONFIG_DATA_CONNECTIVITY_ENABLED  "connectivity-enabled"
 #define NM_CONFIG_DATA_CONNECTIVITY_URI      "connectivity-uri"
 #define NM_CONFIG_DATA_CONNECTIVITY_INTERVAL "connectivity-interval"
 #define NM_CONFIG_DATA_CONNECTIVITY_RESPONSE "connectivity-response"
@@ -159,6 +160,7 @@
 gint nm_config_data_get_value_boolean (const NMConfigData *self, const char *group, const char *key, gint default_value);
 
 char **nm_config_data_get_plugins (const NMConfigData *config_data, gboolean allow_default);
+gboolean nm_config_data_get_connectivity_enabled (const NMConfigData *config_data);
 const char *nm_config_data_get_connectivity_uri (const NMConfigData *config_data);
 guint nm_config_data_get_connectivity_interval (const NMConfigData *config_data);
 const char *nm_config_data_get_connectivity_response (const NMConfigData *config_data);
--- network-manager-1.8.2/src/nm-config.h.~1~	2017-07-07 20:03:25.000000000 +0800
+++ network-manager-1.8.2/src/nm-config.h	2017-08-22 16:16:29.355273323 +0800
@@ -179,6 +179,8 @@
 
 gboolean nm_config_set_global_dns (NMConfig *self, NMGlobalDnsConfig *global_dns, GError **error);
 
+void nm_config_set_connectivity_check_enabled (NMConfig *self, gboolean enabled);
+
 /* internal defines ... */
 extern guint _nm_config_match_nm_version;
 extern char *_nm_config_match_env;
--- network-manager-1.8.2/shared/nm-common-macros.h.~1~	2017-05-20 19:14:54.000000000 +0800
+++ network-manager-1.8.2/shared/nm-common-macros.h	2017-08-22 16:16:38.731026723 +0800
@@ -39,6 +39,7 @@
 #define NM_AUTH_PERMISSION_RELOAD                     "org.freedesktop.NetworkManager.reload"
 #define NM_AUTH_PERMISSION_CHECKPOINT_ROLLBACK        "org.freedesktop.NetworkManager.checkpoint-rollback"
 #define NM_AUTH_PERMISSION_ENABLE_DISABLE_STATISTICS  "org.freedesktop.NetworkManager.enable-disable-statistics"
+#define NM_AUTH_PERMISSION_ENABLE_DISABLE_CONNECTIVITY_CHECK "org.freedesktop.NetworkManager.enable-disable-connectivity-check"
 
 #define NM_CLONED_MAC_PRESERVE                          "preserve"
 #define NM_CLONED_MAC_PERMANENT                         "permanent"
--- network-manager-1.8.2/data/org.freedesktop.NetworkManager.policy.in.in.~1~	2017-05-20 19:14:53.000000000 +0800
+++ network-manager-1.8.2/data/org.freedesktop.NetworkManager.policy.in.in	2017-08-22 16:16:38.699027565 +0800
@@ -151,5 +151,14 @@
     </defaults>
   </action>
 
+  <action id="org.freedesktop.NetworkManager.enable-disable-connectivity-check">
+    <_description>Enable or disable connectivity checking</_description>
+    <_message>System policy prevents enabling or disabling connectivity checking</_message>
+    <defaults>
+      <allow_inactive>no</allow_inactive>
+      <allow_active>yes</allow_active>
+    </defaults>
+  </action>
+
 </policyconfig>
 
--- network-manager-1.8.2/introspection/org.freedesktop.NetworkManager.xml.~1~	2017-07-07 20:03:25.000000000 +0800
+++ network-manager-1.8.2/introspection/org.freedesktop.NetworkManager.xml	2017-08-22 16:16:38.711027249 +0800
@@ -444,6 +444,28 @@
     <property name="Connectivity" type="u" access="read"/>
 
     <!--
+        ConnectivityCheckAvailable:
+
+        Indicates whether connectivity checking service has been
+        configured.  This may return true even if the service is not
+        currently enabled.
+
+        This is primarily intended for use in a privacy control panel,
+        as a way to determine whether to show an option to
+        enable/disable the feature.
+    -->
+    <property name="ConnectivityCheckAvailable" type="b" access="read"/>
+
+    <!--
+        ConnectivityCheckEnabled:
+
+        Indicates whether connectivity checking is enabled.  This
+        property can also be written to to disable connectivity
+        checking (as a privacy control panel might want to do).
+    -->
+    <property name="ConnectivityCheckEnabled" type="b" access="readwrite"/>
+
+    <!--
         GlobalDnsConfiguration:
 
         Dictionary of global DNS settings where the key is one of "searches",
